@page "/SignUp"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Identity.Api.MudBlazor1.Models

@inject HttpClient HttpClient
@inject NavigationManager navigationmanager

<h1>SignUp</h1>

@code {

}


<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">

                <MudTextField T="string" Label="Username" Required="true" @bind-Value = "createuserdto.Username" RequiredError="User name is required!" />

                <MudTextField T="string" Label="Firtsname" Required="true" @bind-Value="createuserdto.Name" RequiredError="User name is required!" />

                <MudTextField T="string" Label="Email" Required="true" @bind-Value="createuserdto.Email" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />

                <MudTextField T="string" Label="Password" @bind-Value="createuserdto.Password" HelperText="Choose a strong password" @ref="pwField1"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Password is required!" />

                <MudTextField T="string"
                              Label="Password" @bind-Value="createuserdto.ConfirmPassword" HelperText="Repeat the password" InputType="InputType.Password"
                              Validation="@(new Func<string, string>(PasswordMatch))" />

                <div class="d-flex align-center justify-space-between">
			        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" OnClick="(async () => await Register())" Class="ml-auto">Register</MudButton>
		        </div>

            </MudForm>
        </MudPaper>
        
    </MudItem>

</MudGrid>
@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    CreateUserDto createuserdto = new CreateUserDto();


    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

    private async Task Register()
    {
        var response = await HttpClient.PostAsJsonAsync("/api/Accaunt/signup", createuserdto);
        if (response.IsSuccessStatusCode)
		{
			navigationmanager.NavigateTo("/signin");
		}

    }


}